



// memoization 

/*

class Solution {
public:
    
    int solve(int i,int j,vector<vector<int>>&dp,int m,int n){
        
        if(i<0 || j<0 || i>=m || j>=n)return 0;
        if(i==m-1 && j==n-1)return 1;
        
        if(dp[i][j]!=-1)return dp[i][j];
        
    
    int  a= solve(i,j+1,dp,m,n);
    int  b = solve(i+1,j,dp,m,n);
        
    return dp[i][j]=left+right;
        
        
        
    }
    
    
    
    int uniquePaths(int m, int n) {
       
        vector<vector<int>>dp(m,vector<int>(n,-1));
        
        return solve(0,0,dp,m,n);
        
        
    }
    
    
    
};

*/






// tabulation

class Solution {
public:
    
int uniquePaths(int m, int n) {
       
        vector<vector<int>>dp(m,vector<int>(n,-1));
        
    dp[0][0]=1;
    
    
    
       for(int i=0;i<m;i++){
           for(int j=0;j<n;j++){
               
              int up=0;
              int left=0; 
               
              if(i==0 && j==0 )continue;
          if(i>0)     
             up=dp[i-1][j];
          if(j>0)
              left=dp[i][j-1];
               
            dp[i][j]=up+left;
               
               
           }
       }
        
    
    return dp[m-1][n-1];
        
    }
    
    
    
};


